{"version":3,"sources":["webpack:///../src/getting-started.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,yMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,oDACA,8BACE,iBAAGC,WAAW,cAAd,4FAEF,kRACA,iBAAQ,CACN,GAAM,qBADR,qBAGA,iBAAQ,CACN,GAAM,gBADR,gBAGA,4DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,wCAIL,qCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,8BAIL,iBAAQ,CACN,GAAM,4BADR,4BAGA,oGACA,+BAAc,0BAAYA,WAAW,KAAvB,YAAd,uBAA0F,0BAAYA,WAAW,KAAvB,oBAA1F,SAAgK,0BAAYA,WAAW,KAAvB,kBAAhK,0JACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kMAUL,0JAAyI,0BAAYA,WAAW,KAAvB,kBAAzI,KACA,iBAAQ,CACN,GAAM,kBADR,kBAGA,gDAA+B,0BAAYA,WAAW,KAAvB,QAA/B,qEAAqJ,0BAAYA,WAAW,KAAvB,UAArJ,uEACA,0GACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iHAWL,iBAAQ,CACN,GAAM,gBADR,gBAGA,6DAA4C,0BAAYA,WAAW,KAAvB,WAA5C,qDAAqJ,0BAAYA,WAAW,KAAvB,WAArJ,8CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6V,gMAsBTJ,EAAWK,gBAAiB","file":"component---src-getting-started-mdx-5910ab37296b9b7d3b0b.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/amaralvitor/Documents/GitHub/upstamps/upstamps-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h1>\n    <p>{`Set up UpStamps in your app`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`This section walks you through installing and configuring UpStamps in your application.`}</p>\n    </blockquote>\n    <p>{`The simplest way to get started with UpStamps is by using the easy-to-use libraries with pre-built components. If you're an advanced user who would like to configure UpStamps from scratch, head on over to API Reference to use the Rest API endpoints.`}</p>\n    <h2 {...{\n      \"id\": \"react-integration\"\n    }}>{`React Integration`}</h2>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <p>{`First, let's install some packages!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install --save upstamps-react\n`}</code></pre>\n    <p>{`or with yarn`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add upstamps-react\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-a-client-provider\"\n    }}>{`Create a client provider`}</h3>\n    <p>{`With all the dependencies you installed, let's create your UpStamps Client.`}</p>\n    <p>{`In our `}<inlineCode parentName=\"p\">{`index.js`}</inlineCode>{` file, let's import `}<inlineCode parentName=\"p\">{`UpStampsProvider`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`upstamps-react`}</inlineCode>{` and add the configuration params based on your UpStamps project. This params values can be found on the UpStamps Dashboard in your project's settings`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { UpStampsProvider } from \"upstamps-react\";\n\n<UpStampsProvider clientId=\"xxx-xxx-xxx\" projectKey=\"xxxxx\" envKey=\"xxxxx\">\n  <div>\n    <YourApp />\n  </div>\n</UpStampsProvider>;\n`}</code></pre>\n    <p>{`That's it! Now your app is ready to start using feature flags. Let's start using by importing some pre-built components inside of `}<inlineCode parentName=\"p\">{`upstamps-react`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"flag-component\"\n    }}>{`Flag Component`}</h3>\n    <p>{`The pre-built component `}<inlineCode parentName=\"p\">{`Flag`}</inlineCode>{` accepts a component child or children, this component inside the `}<inlineCode parentName=\"p\">{`<Flag>`}</inlineCode>{` wrapper only showed when the flag exists in your UpStamps Project.`}</p>\n    <p>{`Notice: The behavior of the flag can be based on the project or the environments.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {  Flag } from \"upstamps-react\";\n\n...\n\n<Flag name=\"private_msg_2\">\n  <YourFeature/>\n</Flag>\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"useflag-hook\"\n    }}>{`useFlag Hook`}</h3>\n    <p>{`The library support React hooks. Use `}<inlineCode parentName=\"p\">{`useFlag`}</inlineCode>{` for a programmatical method. There's no limit to `}<inlineCode parentName=\"p\">{`useFlag`}</inlineCode>{`, just change the names. See the examples.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {  useFlag } from \"upstamps-react\";\n\n...\n\nconst AppComponent = () => {\n  const { show } = useFlag(\"private_msg_2\");\n const privateChat = useFlag(\"private_chat\");\n\n  return (\n    <div>\n      {show && <div>This is a great feature</div>}\n     {privateChat.show && <div>This is a great private chat</div>}\n    </div>\n  );\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}